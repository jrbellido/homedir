" Vim configuration file

" Plugins {{{1
call plug#begin()
  Plug 'ervandew/supertab'
  Plug 'jelera/vim-javascript-syntax'
  Plug 'mattn/emmet-vim'
  Plug 'scrooloose/nerdcommenter'
  Plug 'preservim/nerdtree'
  Plug 'terryma/vim-expand-region'
  Plug 'vim-syntastic/syntastic'
  Plug 'tpope/vim-surround'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'cespare/vim-toml'
  Plug 'stephpy/vim-yaml'
  Plug 'wincent/command-t'
  "  Plug 'vimwiki/vimwiki'
  "  Plug 'posva/vim-vue'

  " --- buffer ---
  " Plug 'fholgado/minibufexpl.vim'

  " --- formatting ---
  Plug 'prettier/vim-prettier'

  " --- rust ---
  Plug 'rust-lang/rust.vim'

  " --- zig ---
  Plug 'ziglang/zig.vim'

  " --- git ---
  Plug 'mhinz/vim-signify'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'

  " --- system ---
  Plug 'qpkorr/vim-renamer'

  " --- colorschemes ---
  Plug 'pgavlin/pulumi.vim'
  Plug 'arzg/vim-colors-xcode'
  Plug 'wadackel/vim-dogrun'
  Plug 'matsuuu/pinkmare', { 'branch': 'main' }
  Plug 'lighthaus-theme/vim-lighthaus'
  Plug 'embark-theme/vim', { 'as': 'embark', 'branch': 'main' }
  Plug 'kkga/vim-envy'
  Plug 'stillwwater/vim-nebula'
  Plug 'wojciechkepka/vim-github-dark'
  Plug 'nocksock/bloop-vim'
  Plug 'AhmedAbdulrahman/vim-aylin'
  Plug 'tjammer/blayu.vim'
  Plug 'dikiaap/minimalist'
  Plug 'tssm/fairyfloss.vim'
  Plug 'jlobos/camila'
  Plug 'lmintmate/blue-mood-vim'
  Plug 'thenewvu/vim-colors-blueprint'
  Plug 'Zabanaa/neuromancer.vim'
  Plug 'ldelossa/vimdark'
  Plug 'jaredgorski/fogbell.vim'
  Plug 'EdenEast/nightfox.nvim'
  Plug 'arcticicestudio/nord-vim'
  Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
call plug#end()

let mapleader = ","

set nocompatible
set encoding=utf-8
set showcmd                     " display incomplete commands
set ttyfast
set hidden
set title
set undolevels=1000
set history=1000
set ruler

" Folding {{{1
set foldenable
set foldmethod=marker

" vim-wiki {{{1
let g:vimwiki_list = [{'path': '~/notes', 'syntax': 'markdown', 'ext': '.md'}]

" Note taking {{{1
nnoremap <leader>sn :w<CR>:silent exec '!sync-notes'<CR>

" Syntax highlighting {{{1
filetype plugin indent on
filetype plugin on
syntax enable

" Show current line and filename {{{1
set modeline
set ls=2

" Backup settings {{{1
set backup
set backupdir=~/.homedir/vim/backup
set directory=~/.homedir/vim/tmp

" Whitespace {{{1
" set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2 expandtab
set autoindent
set backspace=indent,eol,start  " backspace through everything in insert mode

" Searching {{{1
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

" launch incremental search using ripgrep
nmap <c-p> :Rg<CR>
nmap <c-l> :GFiles<CR>

" Others  {{{1
set autoread
set breakindent

" Line numbers {{{1
set number relativenumber

" netrw {{{1
let g:netrw_banner = 0

" Key bindings {{{1
" Move between windows
nmap <tab><tab> <C-w>w

" Prettier
nnoremap gp :silent %!prettier --stdin-filepath %<CR>

" Replace all alias
nnoremap S :%s//g<Left><Left>

" Reload vimrc
nnoremap <leader>r :source ~/.vimrc<CR>

" Toggle word wrap
nnoremap <leader>wr :set wrap!<CR>

" Show invisible characters
nnoremap <leader>l :set list!<CR>

" Move current line up/down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Move current line up/down
nnoremap ¶ :m .+1<CR>==
nnoremap § :m .-2<CR>==
inoremap ¶ <Esc>:m .+1<CR>==gi
inoremap § <Esc>:m .-2<CR>==gi
vnoremap ¶ :m '>+1<CR>gv=gv
vnoremap § :m '<-2<CR>gv=gv

" Insert date
:nnoremap <F5> "=strftime("%Y/%m/%d")<CR>P
:inoremap <F5> <C-R>=strftime("%Y/%m/%d")<CR>

" NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
let g:NERDTreeWinSize=42

" Filetype specific options {{{1
if has("autocmd")
  " Enable file type detection
  filetype on

  autocmd FileType make        setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd FileType makefile    setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd FileType yaml        setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html        setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css         setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript  setlocal ts=2 sts=2 sw=2 expandtab
  " autocmd FileType javascript  call JavaScriptFold()

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml

endif

if has("vim")
  language en
endif

if has("autocmd")
  autocmd FileType html inoremap ;p <p></p><Space><++><Esc>FpT>i
endif

" Key mapping {{{1
set path=..,**

" Pretty colors {{{1
colorscheme minimalist

" Invisible characters {{{1
set listchars=tab:▸\ ,eol:¬,space:.
highlight NonText guifg=#222222 ctermfg=darkgrey
highlight SpecialKey guifg=#222222 ctermfg=darkgrey
highlight ExtraWhitespace guifg=#222222 ctermfg=darkgrey

" CoC {{{1
call coc#add_extension('coc-rust-analyzer',)

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

autocmd CursorHold * silent call CocActionAsync('highlight')

command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

nmap <silent> ga <Plug>(coc-fix-current)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

xmap <silent> <C-s> <Plug>(coc-range-select)
nmap <silent> <C-s> <Plug>(coc-range-select)

" Git plugins {{{1

let g:signify_sign_show_count = 0
let g:signify_sign_show_text = 1

nmap <leader>gj <plug>(signify-next-hunk)
nmap <leader>gk <plug>(signify-prev-hunk)
nmap <leader>gJ 9999<leader>gJ
nmap <leader>gK 9999<leader>gK

" rust.vim {{{1
let g:rustfmt_autosave = 1
